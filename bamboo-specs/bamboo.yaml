---
version: 2
plan:
  project-key: ORCA
  key: PP
  name: prototype-demo
stages:
- Setup Env:
    manual: false
    final: false
    jobs:
    - Set Pending Github Status
- Default Stage:
    manual: false
    final: false
    jobs:
    # - Build and Test
    - Python snyk
#deploy orca and cumulus for integration test
- Deploy Dev Integration Stack:
    manual: false
    final: false
    jobs:
    - Deploy cumulus and orca









- Clean Up and Report:
    manual: false
    final: false
    jobs:
    - Report Status
- Release Stage:
    manual: true
    final: false
    jobs:
    - Release ORCA Documentation
    - Release ORCA Code
Set Pending Github Status:
  key: SPGS
  tasks:
  - checkout:
      force-clean-build: 'false'
      description: Checkout Default Repository
  - script:
      interpreter: SHELL
      scripts:
      - |-
        set -ex
        ./bin/set_status.sh pending ${bamboo.resultsUrl} "CI Running"
      description: Set Pending Status
# Build and Test:
#   key: JOB1
#   other:
#     clean-working-dir: true
#   docker:
#     image: amazonlinux:2
#     volumes:
#       ${bamboo.working.directory}: ${bamboo.working.directory}
#       ${bamboo.tmp.directory}: ${bamboo.tmp.directory}
#   tasks:
#   - checkout:
#       force-clean-build: 'false'
#       description: checkout code
#   - script:
#       interpreter: SHELL
#       scripts:
#       - |-
#         #!/bin/bash
#         export NODE_VERSION "12.x"
#         export TERRAFORM_VERSION "0.13.6"

#         # Add NodeJS and Yarn repos & update package index
#         curl -sL https://rpm.nodesource.com/setup_${NODE_VERSION} | bash - 
#         curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo
#         yum update -y

#         # CLI utilities
#         yum install -y gcc git make openssl unzip wget zip

#         # Python 3 & NodeJS
#         yum install -y python3-devel
#         yum install -y nodejs yarn

#         # AWS & Terraform
#         yum install -y awscli
#         wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
#         unzip *.zip
#         chmod +x terraform
#         mv terraform /usr/local/bin

#         # SSM SessionManager plugin
#         curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
#         yum install -y session-manager-plugin.rpm
#         bin/run_tests.sh
#       description: run all tests
#   - script:
#       interpreter: SHELL
#       scripts:
#       - |-
#         #!/bin/bash
#         ## This script creates a file as a method of letting cleanup jobs know if it was reached, this allows github failure notifications to be sent if the job failed. 
#         set -e
#         touch success.flag
#       description: Set Success Flag
#   final-tasks:
#   - script:
#       interpreter: SHELL
#       scripts:
#       - |-
#         #!/bin/bash
#         ## This script looks for the output from the "Set job success flag" script and reports failure to github if it is not present
#         set -e

#         if [[ ! -f success.flag ]]; then 
#           echo "Job failed, sending failure notice to github"
#           ./bin/set_status.sh failure ${bamboo.resultsUrl} "Testing Step Failed"
#         fi
#       description: report failure to github
Python snyk:
  key: PS
  other:
    clean-working-dir: true
  docker:
    image: maven.earthdata.nasa.gov/node:snyk
    volumes:
      ${bamboo.working.directory}: ${bamboo.working.directory}
      ${bamboo.tmp.directory}: ${bamboo.tmp.directory}
    docker-run-arguments:
    - --net=host
  tasks:
  - script:
      interpreter: SHELL
      scripts:
      - chown -R 500:502 .
      description: change owner
  - clean:
      description: clean up working dir
  - checkout:
      force-clean-build: 'false'
      description: checkout source
  - script:
      interpreter: SHELL
      scripts:
      - |-
        npm install snyk-to-html -g
        cat > scan.sh <<EOF
        snyk test --json --file=\$1 --package-manager=pip
        EOF
        echo $bamboo_hello
        find . -name requirement*.txt
        chmod +x scan.sh
        for pom in $(find . -name requirements.txt);
        do
        snyk test --json --file=$pom --package-manager=pip > report.json;
        filename=$(dirname $pom |  sed s'/\.\///')
        snyk-to-html -i report.json -o "$filename.html";
        done 
        chown -R 500:502 .

        #cat > scan.sh <<EOF
        #!/bin/bash
        #python3.7 -m venv snyk-test
        #source snyk-test/bin/activate
        #update-alternatives --install /tmp/snyk-test/bin/python  python /usr/local/bin/python3.7 1
        #pip install -r pip_requirements.txt
        #snyk test --json --package-manager=pip --file=data/mask_fill_pip_requirements.txt > pip_report.json
        #snyk-to-html -i pip_report.json -o pip_results.html
        #snyk test --json --file=data/mask_fill_conda_requirements.txt > conda_report.json
        #snyk-to-html -i conda_report.json -o conda_results.html
        #EOF
        #chmod +x scan.sh
        #docker run --rm -v $PWD:/tmp -w /tmp maven.earthdata.nasa.gov/snyk:py ./scan.sh

      description: snyk scan
  artifacts:
  - name: html report
    pattern: '**/*.html'
    shared: false
    required: true

#job for deploying cumulus and orca
Deploy cumulus and orca:
  key: DCO
  other:
    clean-working-dir: true
    # Some plugin configurations are not supported by YAML Specs
  docker:
    # image: maven.earthdata.nasa.gov/cumulus:latest
    image: amazonlinux:2
    volumes:
      ${bamboo.working.directory}: ${bamboo.working.directory}
      ${bamboo.tmp.directory}: ${bamboo.tmp.directory}
  tasks:
  - checkout:
      force-clean-build: 'true'
      description: Checkout Default Repository

  - script:
      interpreter: SHELL
      scripts:
      - |-
        #!/bin/bash
        export NODE_VERSION="16.x"
        export TERRAFORM_VERSION="0.13.6"
        # Add NodeJS and Yarn repos & update package index
        curl -sL https://rpm.nodesource.com/setup_${NODE_VERSION} | bash - 
        curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo
        yum update -y
        # CLI utilities
        yum install -y gcc git make openssl unzip wget zip
        # Python 3 & NodeJS
        yum install -y python3-devel
        yum install -y nodejs yarn
        # AWS & Terraform
        yum install -y awscli
        wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
        unzip *.zip
        chmod +x terraform
        mv terraform /usr/local/bin
        # SSM SessionManager plugin
        curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
        yum install -y session-manager-plugin.rpm



      
  # - checkout:
  #     path: source/cumulus
  #     force-clean-build: 'true'
  #     description: Checkout Default Repository
  # - script:
  #     interpreter: SHELL
  #     scripts:
  #     - "#!/bin/bash\n## This script moves  the incoming environment artifact to the source/work directory \nset -e\ncp -f .bamboo_env_vars ./source/cumulus/.bamboo_env_vars\ncp -f .bamboo_env_vars /cumulus/"
  #     description: Move bamboo_env_vars into project

  # - script:
  #     interpreter: SHELL
  #     scripts:
  #     - "#!/bin/bash\n## This script creates a file as a method of letting cleanup jobs know if it was reached, this allows github failure notifications to be sent if the job failed. \nset -e \ntouch success.flag"
  #     working-dir: source/cumulus
  #     description: Set job success flag
  final-tasks:
  # - script:
  #     interpreter: SHELL
  #     scripts:
  #     - "#!/bin/bash\n## This script looks for the output from the \"Set job success flag\" script and reports failure to github if it is not present\n## This script sets a default test output so that the Junit parser task doesn't fail if there's no test output (due to test skips, etc)\nset -e\nif [[ ! -f success.flag ]]; then \n  echo \"Job failed, sending failure notice to github\"\n  ./bamboo/set-status.sh failure ${bamboo.resultsUrl} \"Deploy Dev Integration Stack Step Failed\"\nelse\n  echo '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<testsuites disabled=\"0\" errors=\"0\" failures=\"0\" tests=\"1\" time=\"0.014\">\n <testsuite name=\"Disabled Build\" hostname=\"localhost\" time=\"0.009\" errors=\"0\" tests=\"1\" skipped=\"1\" disabled=\"0\" failures=\"0\">\n  <testcase classname=\"Disabled Test\" name=\"is disabled\" time=\"0.001\">\n   <skipped message=\"Disabled due to bamboo flags\" />\n  </testcase>\n </testsuite>\n</testsuites>' >> ../../junit-DisabledBuild.xml\nfi"
  #     working-dir: source/cumulus
  #     description: Report Build Failure to Github
  # - script:
  #     interpreter: SHELL
  #     scripts:
  #     - "#!/bin/bash\n\n## This script removes the \"source\" subdirectory which all jobs in this stage utilize.   This ensures that there's nothing left over from previous runs. \n## This is required as the checkout job does not interface correctly with docker in all instances. \n\nrm -Rf ../../*.xml\nrm -Rf ../cumulus"
  #     working-dir: source/cumulus
  #     description: Cleanup
  # artifact-subscriptions:
  # - artifact: cross_job_build_envs
  # - artifact: ts_build_cache





Report Status:
  key: RS
  tasks:
  - checkout:
      force-clean-build: 'false'
      description: Checkout Default Repository
  final-tasks:
  - script:
      interpreter: SHELL
      scripts:
      - |-
        #!/bin/bash 
        set -e
        ./bin/set_status.sh success ${bamboo.resultsUrl} "Build Success"
      description: Report Success to GitHub

Release ORCA Documentation:
  key: ROD
  description: Releases ORCA Documentation to nasa.github.io/cumulus-orca
  docker:
    image: node:12.15.0
    volumes:
      ${bamboo.working.directory}: ${bamboo.working.directory}
      ${bamboo.tmp.directory}: ${bamboo.tmp.directory}
  tasks:
  - checkout:
      force-clean-build: 'false'
      description: Checkout Default Repository
  - script:
      interpreter: SHELL
      scripts:
      - |-
        #!/bin/bash
        set -ex
        if [ ! -f "bin/create_release_documentation.sh" ]; then
          echo "ERROR: create_release_documentation.sh script does not exist!"
          exit 0
        fi
        bin/create_release_documentation.sh
      description: Run documentation release script
Release ORCA Code:
  key: RO
  description: Creates a GitHub Release and uploads artifacts for release
  docker:
    image: amazonlinux:2
    volumes:
      ${bamboo.working.directory}: ${bamboo.working.directory}
      ${bamboo.tmp.directory}: ${bamboo.tmp.directory}
  tasks:
  - script:
      interpreter: SHELL
      scripts:
      - |-
        ## This script removes the "source" subdirectory which all jobs in this stage utilize.   This ensures that there's nothing left over from previous runs. 
        ## This is required as the checkout job does not interface correctly with docker in all instances. 
        rm -rf ./source
        mkdir source
        rm -rf dist
      description: Clean Working Directory
  - checkout:
      force-clean-build: 'false'
      description: Checkout Default Repository
  - script:
      interpreter: SHELL
      scripts:
      - |-
        #!/bin/bash
        export NODE_VERSION "12.x"
        export TERRAFORM_VERSION "0.13.6"

        # Add NodeJS and Yarn repos & update package index
        curl -sL https://rpm.nodesource.com/setup_${NODE_VERSION} | bash - 
        curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo
        yum update -y

        # CLI utilities
        yum install -y gcc git make openssl unzip wget zip

        # Python 3 & NodeJS
        yum install -y python3-devel
        yum install -y nodejs yarn

        # AWS & Terraform
        yum install -y awscli
        #wget "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
        #unzip *.zip
        #chmod +x terraform
        #mv terraform /usr/local/bin

        # SSM SessionManager plugin
        curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
        yum install -y session-manager-plugin.rpm

        set -ex
        bin/build_release_package.sh
      description: Create Release Files and Release in GitHub
variables:
  ORCA_VERSION: 0.0.1
  RELEASE_FLAG: 'false'
  REPORT_BUILD_STATUS: 'true'
repositories:
- orca test branch: #this is created by CICD team from https://ci.earthdata.nasa.gov/. Contact Venku Jayanti with any issues.
    scope: global
triggers:
- polling:
    period: '60' #time in seconds
branches:
  create: for-new-branch
  delete:
    after-deleted-days: 7
    after-inactive-days: 30
  link-to-jira: true
---
version: 2
plan:
  key: ORCA-PP
plan-permissions:
- users:
  - bhazuka
  - andrew.dorn
  - rizbi.hassan
  - scott.saxon

  permissions:
  - view
  - edit
  - build
  - clone
  - admin
...