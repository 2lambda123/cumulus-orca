{
  "Comment": "Recover files belonging to a granule",
  "StartAt": "ExtractFilepaths",
  "TimeoutSeconds": 18000,
  "States": {
    "ExtractFilepaths": {
      "Parameters": {
        "input.$": "$.payload",
        "config": {
          "buckets.$": "$.meta.buckets",
          "fileBucketMaps.$": "$.meta.collection.files",
          "excludedFileExtensions.$": "$.meta.collection.meta.orca.excludedFileExtensions"
        }
      },
      "Type": "Task",
      "Resource": "${orca_lambda_extract_filepaths_for_granule_arn}",
      "ResultPath": "$.previous_step_output",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.exception",
          "Next": "WorkflowFailed"
        }
      ],
      "Next": "RequestFromArchive"
    },
    "RequestFromArchive": {
      "Parameters": {
        "event.$": "$",
        "input.$": "$.previous_step_output",
        "optionalValues": {
          "config.defaultRecoveryTypeOverride": "event.meta.collection.meta.orca.defaultRecoveryTypeOverride",
          "config.defaultBucketOverride": "event.meta.collection.meta.orca.defaultBucketOverride",
          "config.s3MultipartChunksizeMb": "event.meta.collection.meta.s3MultipartChunksizeMb",
          "config.asyncOperationId": "event.cumulus_meta.asyncOperationId"
        }
      },
      "Type": "Task",
      "Resource": "${orca_lambda_request_from_archive_arn}",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.exception",
          "Next": "WorkflowFailed"
        }
      ],
      "End": true
    },
    "WorkflowFailed": {
      "Type": "Fail",
      "Cause": "Workflow failed"
    }
  }
}