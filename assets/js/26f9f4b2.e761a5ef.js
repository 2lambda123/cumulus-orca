"use strict";(self.webpackChunkorca_website=self.webpackChunkorca_website||[]).push([[4814],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return r?n.createElement(g,a(a({ref:t},l),{},{components:r})):n.createElement(g,a({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2156:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var n=r(7462),o=r(3366),s=(r(7294),r(3905)),a=["components"],i={id:"postgres-tests",title:"Postgres Tests",description:"Instructions on running 'postgres' tests."},p=void 0,c={unversionedId:"developer/development-guide/code/postgres-tests",id:"developer/development-guide/code/postgres-tests",title:"Postgres Tests",description:"Instructions on running 'postgres' tests.",source:"@site/docs/developer/development-guide/code/postgres-tests.md",sourceDirName:"developer/development-guide/code",slug:"/developer/development-guide/code/postgres-tests",permalink:"/cumulus-orca/docs/developer/development-guide/code/postgres-tests",draft:!1,editUrl:"https://github.com/nasa/cumulus-orca/edit/develop/website/docs/developer/development-guide/code/postgres-tests.md",tags:[],version:"current",frontMatter:{id:"postgres-tests",title:"Postgres Tests",description:"Instructions on running 'postgres' tests."},sidebar:"dev_guide",previous:{title:"Integration Tests",permalink:"/cumulus-orca/docs/developer/development-guide/code/integration-tests"},next:{title:"ORCA Logs",permalink:"/cumulus-orca/docs/developer/development-guide/code/orca-logging"}},l={},u=[{value:"Preparing to Run Postgres Tests",id:"preparing-to-run-postgres-tests",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Run through the steps in ",(0,s.kt)("a",{parentName:"p",href:"/cumulus-orca/docs/developer/development-guide/code/setup-dev-env"},"Setting Up a Dev Environment")," prior to modifying/testing code."))),(0,s.kt)("h2",{id:"preparing-to-run-postgres-tests"},"Preparing to Run Postgres Tests"),(0,s.kt)("p",null,"Test files ending in '_postgres.py' require a postgres database to be accessible."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Make sure you have Docker running on your machine."),(0,s.kt)("li",{parentName:"ol"},"Open a command prompt and run",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-commandline"},"docker run -it --rm --name some-postgres -v [path to repository]/database/ddl/base:/docker-entrypoint-initdb.d/ -p 5432:5432 -e POSTGRES_PASSWORD=[your db password here] postgres\n"))),(0,s.kt)("li",{parentName:"ol"},"The running database can now be accessed at localhost:5432"),(0,s.kt)("li",{parentName:"ol"},"Use the username 'postgres', and your new db password to access the db, and set the password for 'druser'.",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-commandline"},"docker run -it --rm --network host -e POSTGRES_PASSWORD=[your user password here] postgres psql -h localhost -U postgres`\n"))),(0,s.kt)("li",{parentName:"ol"},"Place a file called 'private_config.json' in the postgres' test folder and give it the information for your database.",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{"DATABASE_HOST": "localhost",\n"DATABASE_PORT": "5432",\n"DATABASE_NAME": "orca",\n"DATABASE_USER": "druser",\n"DATABASE_PW": "[your user password here]",\n"MASTER_USER_PW": "[your db password here]"}\n')),"These values will be injected into your environment variables before the test is run."),(0,s.kt)("li",{parentName:"ol"},"You may now run postgres tests the same way you would ",(0,s.kt)("a",{parentName:"li",href:"unit-tests"},"unit tests"),".")))}m.isMDXComponent=!0}}]);