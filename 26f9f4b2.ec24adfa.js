(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{107:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=o.a.createContext({}),d=function(e){var t=o.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=d(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(r),b=n,m=u["".concat(s,".").concat(b)]||u[b]||l[b]||a;return r?o.a.createElement(m,c(c({ref:t},p),{},{components:r})):o.a.createElement(m,c({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var p=2;p<a;p++)s[p]=r[p];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},78:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(3),o=(r(0),r(107));const a={id:"postgres-tests",title:"Postgres Tests",description:"Instructions on running 'postgres' tests."},s={unversionedId:"developer/development-guide/code/postgres-tests",id:"developer/development-guide/code/postgres-tests",isDocsHomePage:!1,title:"Postgres Tests",description:"Instructions on running 'postgres' tests.",source:"@site/docs/developer/development-guide/code/postgres-tests.md",slug:"/developer/development-guide/code/postgres-tests",permalink:"/cumulus-orca/docs/developer/development-guide/code/postgres-tests",editUrl:"https://github.com/nasa/cumulus-orca/edit/develop/website/docs/developer/development-guide/code/postgres-tests.md",version:"current",sidebar:"dev_guide",previous:{title:"Unit Tests",permalink:"/cumulus-orca/docs/developer/development-guide/code/unit-tests"},next:{title:"Documentation Introduction",permalink:"/cumulus-orca/docs/developer/development-guide/documentation/contrib-documentation-intro"}},c=[{value:"Preparing to Run Postgres Tests",id:"preparing-to-run-postgres-tests",children:[]}],i={rightToc:c};function p({components:e,...t}){return Object(o.b)("wrapper",Object(n.a)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Run through the steps in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/developer/development-guide/code/setup-dev-env"}),"Setting Up a Dev Environment")," prior to modifying/testing code."))),Object(o.b)("h2",{id:"preparing-to-run-postgres-tests"},"Preparing to Run Postgres Tests"),Object(o.b)("p",null,"Test files ending in '_postgres.py' require a postgres database to be accessible."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Make sure you have Docker running on your machine."),Object(o.b)("li",{parentName:"ol"},"Open a command prompt and run",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-commandline"}),"docker run -it --rm --name some-postgres -v [path to repository]/database/ddl/base:/docker-entrypoint-initdb.d/ -p 5432:5432 -e POSTGRES_PASSWORD=[your db password here] postgres\n"))),Object(o.b)("li",{parentName:"ol"},"The running database can now be accessed at localhost:5432"),Object(o.b)("li",{parentName:"ol"},"Use the username 'postgres', and your new db password to access the db, and set the password for 'druser'.",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-commandline"}),"docker run -it --rm --network host -e POSTGRES_PASSWORD=[your user password here] postgres psql -h localhost -U postgres`\n"))),Object(o.b)("li",{parentName:"ol"},"Place a file called 'private_config.json' in the postgres' test folder and give it the information for your database.",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{"DATABASE_HOST": "localhost",\n"DATABASE_PORT": "5432",\n"DATABASE_NAME": "disaster_recovery",\n"DATABASE_USER": "druser",\n"DATABASE_PW": "[your user password here]",\n"MASTER_USER_PW": "[your db password here]"}\n')),"These values will be injected into your environment variables before the test is run."),Object(o.b)("li",{parentName:"ol"},"You may now run postgres tests the same way you would ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"unit-tests"}),"unit tests"),".")))}p.isMDXComponent=!0}}]);